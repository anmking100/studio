'use server';
/**
 * @fileOverview Provides insights and suggestions for a user based on their data.
 *
 * - getUserInsights - A function to get insights and suggestions.
 * - UserInsightsInput - The input type.
 * - UserInsightsOutput - The return type.
 */

import {ai} from '@/ai/genkit';
import {z} from 'zod';

const UserInsightsInputSchema = z.object({
  userId: z.string().describe("The ID of the user being inquired about."),
  userName: z.string().describe("The name of the user."),
  userRole: z.string().optional().describe("The role of the user (e.g., developer, HR)."),
  currentFragmentationScore: z.number().optional().describe("The user's current cognitive fragmentation score (0-5)."),
  currentScoreSummary: z.string().optional().describe("A summary explaining the current fragmentation score, generated by the algorithmic calculator."),
  recentActivitiesSample: z.array(z.string()).optional().describe("A brief, high-level summary of a few recent key activities or patterns. Example: ['Attended 3 project meetings', 'Updated 5 Jira tickets for Project X', 'Multiple context switches between coding and communication tools']"),
  question: z.string().describe("The specific question asked about the user."),
});
export type UserInsightsInput = z.infer<typeof UserInsightsInputSchema>;

const UserInsightsOutputSchema = z.object({
  answer: z.string().describe("A direct, contextual answer to the question based on the provided user data."),
  suggestions: z.array(z.string()).optional().describe("Actionable suggestions for the user related to focus, productivity, or well-being, based on their data and the question."),
});
export type UserInsightsOutput = z.infer<typeof UserInsightsOutputSchema>;

export async function getUserInsights(input: UserInsightsInput): Promise<UserInsightsOutput> {
  return userInsightsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'userInsightsPrompt',
  input: {schema: UserInsightsInputSchema},
  output: {schema: UserInsightsOutputSchema},
  prompt: `You are a helpful AI assistant for the FocusFlow application. Your role is to provide insights and actionable suggestions about users based on their cognitive fragmentation score and activity patterns.
You will be given data about a specific user and a question about them.
Your goal is to answer the question thoughtfully using ONLY the provided data and then offer relevant suggestions.

User Information:
- Name: {{{userName}}}
{{#if userRole}} - Role: {{{userRole}}} {{/if}}
{{#if currentFragmentationScore}} - Current Fragmentation Score: {{{currentFragmentationScore}}} (out of 5, where a higher score means more fragmentation and potentially lower focus). {{/if}}
{{#if currentScoreSummary}} - Current Score Context: {{{currentScoreSummary}}} {{/if}}
{{#if recentActivitiesSample.length}}
- Recent Activity Highlights:
  {{#each recentActivitiesSample}}
  - {{{this}}}
  {{/each}}
{{else}}
- No specific recent activity highlights provided.
{{/if}}

Question: "{{{question}}}"

Instructions:
1.  **Answer the Question:** Directly address the question using the information available in "User Information". If the information is not available in the provided data, clearly state that. Do not invent information or assume external knowledge.
2.  **Provide Suggestions:** Based on the user's data (especially score and activity highlights) and the question asked, provide 1-3 concise, actionable suggestions. Suggestions should aim to improve focus, reduce cognitive load, or enhance productivity.
    - If the score is high, suggest ways to reduce fragmentation.
    - If the score is moderate, suggest ways to optimize.
    - If the score is low, suggestions can be about maintaining good habits or proactive planning.
    - If no specific activity data is available to base suggestions on, you can offer general productivity tips relevant to the question.

Examples of good suggestions:
- "Consider batching similar administrative tasks to reduce context switching."
- "If meetings are contributing to fragmentation, try to schedule dedicated focus blocks in the calendar."
- "Review task priorities to see if any can be delegated or deferred if workload seems high."
- "Encourage regular short breaks to help maintain focus during long tasks."

Ensure your entire response is in the specified JSON format with "answer" and "suggestions" fields.
If the question cannot be answered due to lack of information in the provided data, the answer should state that, and suggestions can be more general if applicable.
`,
});

const userInsightsFlow = ai.defineFlow(
  {
    name: 'userInsightsFlow',
    inputSchema: UserInsightsInputSchema,
    outputSchema: UserInsightsOutputSchema,
  },
  async (input) => {
    const {output} = await prompt(input);
    if (!output) {
      // Fallback if AI fails to produce structured output
      console.error('UserInsightsFlow: AI did not return a structured output for input:', JSON.stringify(input));
      return {
        answer: "I'm sorry, I couldn't process that request fully. The user data might be incomplete or there was an issue generating a detailed response from the AI.",
        suggestions: ["Ensure all relevant user activity data is available for a more comprehensive analysis.", "Try rephrasing the question or check if the AI model is responsive."],
      };
    }
    return output;
  }
);
